схема:
1) загружаем xml поставщиков ( в 00:00 downloads.sh)

2) предварительный разбор в таблицу tmp_goods ( в 01:00 loadouts_std.sh)

3) потом запускается runparser.sh ->  process_params.php,
который разбирает tmp_goods на good_prices, img_urls, images, goods_props, hashes, goods_props_current
по кусочкам.

4) запускаестся скрипт subscribeupd_new.sh, который загружаетс обновления в базу gs3_blank:
gs3.goods_prices -> gs3_blank.goods_pricis_tmp -> gs3_blank.goods_prices_0;
добавляте строки в goods_bindings_0, items_0 - если нужно;
gs3.goods_props_current -> items_0, gs3_blank.goods_prices_0 -> items_0

5) затем, сливаем таблицы в csv файлы bitmasks_0 -> bitmasks_0.csv,
	items_0 -> items_0.csv (новые и с истекшим периодом) , bits_0 -> bits_0.csv ;
	и в vars_0.csv записываем количество записей в получившихся файлах;
	и по ftp передаем их на сервер в cat_new/in (скрипт transfer.sh )
5.1) файл test.php в cat_new загружает эти csv в базу на сервер
--------------------------
-далее  работа с картинками
6) images_download.sh берёт адрес из img_urls, если для этой записи hash='' & state=0
 и скачивает картинку в папку /var/www/images/ , если скачивается - иначе обновляет state=1,
 и добавляет в таблицу imagefiles запись, связывающую hash и filename  в папке /var/www/images

7) images_cure.sh пытается скачать картинки точно так же, как и images_download.sh, в случае неудачи
увеличивая поле state на +1

8) таблица images связывает картинки с товаром : art_id - > goods_prices, url_id -> img_urls;
при state > 0 - картинка ещё не связана с товаром, тогда проверяет :скачена ли картинка, если да, то goods_prices.images +=img_urls.hash, state = 0;
иначе state++
(скрипт updateimages.sh)
9) скрипт imagefiles.sh выгружает таблицу в файл imagefiles.sql и по ftp передаёт его на сервер
в папку cat_new/in